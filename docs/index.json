

    

    

    

    

    

    

    

    

    

[{"content":"This guide demonstrates how to build a simple REST API in Go using a layered architecture consisting of Model, Service, Handler, and Router layers. We’ll walk through an example: fetching news details by ID.\nBy following this structure, your application becomes easier to maintain, extend, and test.\n1. Architecture Overview A typical request flows through the system like this:\nExplanation:\nThe client sends an HTTP request. The Router (Gin) matches the request to a handler function. The Handler validates input and calls the Service layer. The Service executes business logic and fetches data from the Model. The Model interacts with the database (via GORM). Results are propagated back through the layers, and a JSON response is returned. 2. Model Layer (Database Models) The Model layer defines the schema and interacts with the database.\n","date":"26 Aug 2025","image":"https://zhangsiming-bailiyingqi.github.io/images/layered-api.jpg","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/go/layered-api/","title":"Building a Simple Layered API in Go (Gin + GORM)"},{"content":"1. Introduction A Kubernetes Operator is an advanced controller that automates the management of complex applications. Instead of relying on humans to perform tasks such as deployment, scaling, and backup, an Operator encodes operational knowledge directly into Kubernetes.\nThis guide provides a step-by-step walkthrough for building a simple MySQL Operator with Kubebuilder. It is written for beginners and includes full code samples and explanations.\n2. Why Operators? Automation: Routine tasks (create, scale, backup) are automated. Consistency: Applications always converge to the desired state. Declarative management: Users describe intent in a Custom Resource (CR), and the Operator ensures the system matches. 3. Core Concepts 3.1 Custom Resource (CR) and Custom Resource Definition (CRD) CRD: Extends the Kubernetes API by defining a new resource type (e.g., MySQL). CR: An instance of the CRD that represents desired state (e.g., a MySQL instance with 2 replicas). 3.2 Controller A controller runs a reconciliation loop:\n","date":"26 Aug 2025","image":"https://zhangsiming-bailiyingqi.github.io/images/operator.jpg","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/kubernetes/operator/","title":"Kubernetes Operator: A Beginner-Friendly Guide"},{"content":"Closures are a fundamental concept in many programming languages, including Go and Python. This article provides a clear explanation of what closures are, how they work in Go, and some common pitfalls developers should be aware of.\n1. What Is a Closure? A closure is a function bundled together with its surrounding environment. It consists of two elements:\nFunction – the inner function returned by an outer function. This can be a named function, an anonymous function, or a lambda expression. Environment – the variables captured from the outer scope that remain accessible even after the outer function has returned. In practice, closures allow functions to retain access to variables that were in scope when the function was defined—even if those variables are no longer available in the current call stack.\n","date":"26 Aug 2025","image":"https://zhangsiming-bailiyingqi.github.io/images/go-closures.jpg","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/go/go-closures/","title":"Understanding Closures in Go"},{"content":"","date":"25 Aug 2025","image":"https://via.placeholder.com/1200x800","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example3/","title":"tag algorithm"},{"content":"","date":"25 Aug 2025","image":"https://via.placeholder.com/1200x800","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example4/","title":"tag English"},{"content":"","date":"25 Aug 2025","image":"https://via.placeholder.com/1200x800","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example/","title":"tag golang"},{"content":"","date":"25 Aug 2025","image":"https://via.placeholder.com/1200x800","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example5/","title":"tag interview"},{"content":"","date":"25 Aug 2025","image":"https://via.placeholder.com/1200x800","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example2/","title":"tag kubernetes"},{"content":"","date":"25 Aug 2025","image":"https://via.placeholder.com/1200x800","permalink":"https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example1/","title":"tag vue"}]