<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on bailiyingqi</title>
    <link>https://zhangsiming-bailiyingqi.github.io/tags/golang/</link>
    <description>Recent content in Golang on bailiyingqi</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 26 Aug 2025 02:00:00 +0800</lastBuildDate>
    <atom:link href="https://zhangsiming-bailiyingqi.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a Simple Layered API in Go (Gin &#43; GORM)</title>
      <link>https://zhangsiming-bailiyingqi.github.io/posts/go/layered-api/</link>
      <pubDate>Tue, 26 Aug 2025 02:00:00 +0800</pubDate>
      <guid>https://zhangsiming-bailiyingqi.github.io/posts/go/layered-api/</guid>
      <description>&lt;p&gt;This guide demonstrates how to build a simple REST API in Go using a &lt;strong&gt;layered architecture&lt;/strong&gt; consisting of &lt;strong&gt;Model&lt;/strong&gt;, &lt;strong&gt;Service&lt;/strong&gt;, &lt;strong&gt;Handler&lt;/strong&gt;, and &lt;strong&gt;Router&lt;/strong&gt; layers. We’ll walk through an example: fetching news details by ID.&lt;/p&gt;&#xA;&lt;p&gt;By following this structure, your application becomes easier to &lt;strong&gt;maintain, extend, and test&lt;/strong&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;architecture-overview&#34;&gt;Architecture Overview&lt;/h2&gt;&#xA;&lt;p&gt;A typical request flows through the system like this:&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://zhangsiming-bailiyingqi.github.io/images/layered-api-structure.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Explanation:&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The &lt;strong&gt;client&lt;/strong&gt; sends an HTTP request.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;Router&lt;/strong&gt; (Gin) matches the request to a handler function.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;Handler&lt;/strong&gt; validates input and calls the Service layer.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;Service&lt;/strong&gt; executes business logic and fetches data from the Model.&lt;/li&gt;&#xA;&lt;li&gt;The &lt;strong&gt;Model&lt;/strong&gt; interacts with the database (via GORM).&lt;/li&gt;&#xA;&lt;li&gt;Results are propagated back through the layers, and a JSON response is returned.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;model-layer-database-models&#34;&gt;Model Layer (Database Models)&lt;/h2&gt;&#xA;&lt;p&gt;The &lt;strong&gt;Model layer&lt;/strong&gt; defines the schema and interacts with the database.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Understanding Closures in Go</title>
      <link>https://zhangsiming-bailiyingqi.github.io/posts/go/go-closures/</link>
      <pubDate>Tue, 26 Aug 2025 00:00:00 +0800</pubDate>
      <guid>https://zhangsiming-bailiyingqi.github.io/posts/go/go-closures/</guid>
      <description>&lt;p&gt;Closures are a fundamental concept in many programming languages, including Go and Python. This article provides a clear explanation of what closures are, how they work in Go, and some common pitfalls developers should be aware of.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-is-a-closure&#34;&gt;What Is a Closure?&lt;/h2&gt;&#xA;&lt;p&gt;A closure is a function bundled together with its surrounding environment. It consists of two elements:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;strong&gt;Function&lt;/strong&gt; – the inner function returned by an outer function. This can be a named function, an anonymous function, or a lambda expression.&lt;/li&gt;&#xA;&lt;li&gt;&lt;strong&gt;Environment&lt;/strong&gt; – the variables captured from the outer scope that remain accessible even after the outer function has returned.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;In practice, closures allow functions to retain access to variables that were in scope when the function was defined—even if those variables are no longer available in the current call stack.&lt;/p&gt;</description>
    </item>
    <item>
      <title>tag golang</title>
      <link>https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example/</link>
      <pubDate>Mon, 25 Aug 2025 18:00:00 +0800</pubDate>
      <guid>https://zhangsiming-bailiyingqi.github.io/posts/tags/tags-example/</guid>
      <description></description>
    </item>
  </channel>
</rss>
